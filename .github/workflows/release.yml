name: Create Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        
    - uses: extractions/setup-just@v3
        
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
    - name: Install dependencies and build
      run: |
        just install
        just build
        
    - name: Generate changelog
      id: changelog
      run: |
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "## üöÄ AIÊèêÁ§∫ËØçÁÆ°ÁêÜÂô® v${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### ‚ú® Êñ∞ÂäüËÉΩ" >> $GITHUB_OUTPUT
        echo "- ËØ∑Âú®Ê≠§Â§ÑÊ∑ªÂä†Êñ∞ÂäüËÉΩËØ¥Êòé" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### üêõ ‰øÆÂ§ç" >> $GITHUB_OUTPUT
        echo "- ËØ∑Âú®Ê≠§Â§ÑÊ∑ªÂä†‰øÆÂ§çËØ¥Êòé" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### üì¶ ÂÆâË£ÖÊñπÊ≥ï" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "#### ÊñπÊ≥ï1: Áõ¥Êé•ÂÆâË£ÖCRXÊñá‰ª∂" >> $GITHUB_OUTPUT
        echo "1. ‰∏ãËΩΩ \`prompt-manager-v${{ steps.get_version.outputs.VERSION }}.crx\` Êñá‰ª∂" >> $GITHUB_OUTPUT
        echo "2. ÊâìÂºÄ Chrome Êâ©Â±ïÁÆ°ÁêÜÈ°µÈù¢ \`chrome://extensions/\`" >> $GITHUB_OUTPUT
        echo "3. ÂºÄÂêØÂºÄÂèëËÄÖÊ®°Âºè" >> $GITHUB_OUTPUT
        echo "4. ÊãñÊãΩ \`.crx\` Êñá‰ª∂Âà∞È°µÈù¢ËøõË°åÂÆâË£Ö" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "#### ÊñπÊ≥ï2: Ëß£ÂéãZIPÊñá‰ª∂ÂÆâË£Ö" >> $GITHUB_OUTPUT
        echo "1. ‰∏ãËΩΩ \`prompt-manager-v${{ steps.get_version.outputs.VERSION }}.zip\` Êñá‰ª∂" >> $GITHUB_OUTPUT
        echo "2. Ëß£ÂéãÂà∞Êú¨Âú∞Êñá‰ª∂Â§π" >> $GITHUB_OUTPUT
        echo "3. Âú®ChromeÊâ©Â±ïÁÆ°ÁêÜÈ°µÈù¢ÁÇπÂáª\"Âä†ËΩΩÂ∑≤Ëß£ÂéãÁöÑÊâ©Â±ïÁ®ãÂ∫è\"" >> $GITHUB_OUTPUT
        echo "4. ÈÄâÊã©Ëß£ÂéãÂêéÁöÑÊñá‰ª∂Â§π" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### üîß ÊäÄÊúØ‰ø°ÊÅØ" >> $GITHUB_OUTPUT
        echo "- Node.js: 22.x" >> $GITHUB_OUTPUT
        echo "- Manifest Version: 3" >> $GITHUB_OUTPUT
        echo "- ÊûÑÂª∫Êó∂Èó¥: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.VERSION }}
        release_name: AIÊèêÁ§∫ËØçÁÆ°ÁêÜÂô® v${{ steps.get_version.outputs.VERSION }}
        body: ${{ steps.changelog.outputs.CHANGELOG }}
        draft: false
        prerelease: false
        
    - name: Upload CRX to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./prompt-manager-v${{ steps.get_version.outputs.VERSION }}.crx
        asset_name: prompt-manager-v${{ steps.get_version.outputs.VERSION }}.crx
        asset_content_type: application/x-chrome-extension
        
    - name: Upload ZIP to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./prompt-manager-v${{ steps.get_version.outputs.VERSION }}.zip
        asset_name: prompt-manager-v${{ steps.get_version.outputs.VERSION }}.zip
        asset_content_type: application/zip

    # https://developer.chrome.com/docs/webstore/using-api
    - name: Publish to Chrome Web Store
      id: publish-chrome-extension
      uses: puzzlers-labs/chrome-webstore-publish@v1
      with:
        mode: publish # Or `sign` to sign the extension and publish at a later step (manually).
        extension_id: ${{ vars.CHROME_EXTENSION_ID }}
        zip_file_path: ./prompt-manager-v${{ steps.get_version.outputs.VERSION }}.zip
        client_id: ${{ secrets.GOOGLE_CLIENT_ID }}
        client_secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        refresh_token: ${{ secrets.GOOGLE_REFRESH_TOKEN }}
        publish_target: public # Or `testers` for internal publishing target to TrustedTesters.
        expedited_review: true # This does not guarantee an expedited Review process. But it makes an attempt.
        # Only one of the following should be provided:
        crx_private_key: ${{ secrets.CRX_PRIVATE_KEY }}
        # crx_private_key_path: ./path/to/key.pem

    # Example: Use the output path in a later step
    - name: Use package artifact path
      run: echo "Package artifact path: ${{ steps.publish-chrome-extension.outputs.package-artifact-path }}"